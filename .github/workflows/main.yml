name: Build signed Artifacts

on:
  push:
    branches:
      - main
    tags:
      - 'v*' # Löst den Workflow bei Tags aus, die mit 'v' beginnen, z.B. v1.0.0
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build APKs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Gradle
        # Nutzt die offizielle Gradle Action, die das JDK-Setup und das Caching optimiert.
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper

      - name: Create local.properties file
        run: |
          echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" >> local.properties
          echo "STORE_FILE=$GITHUB_WORKSPACE/keystore/release.keystore" >> local.properties
          echo "STORE_PASSWORD=${{ secrets.STORE_PASSWORD }}" >> local.properties
          echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> local.properties
          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> local.properties

      - name: Create the keystore file from secret
        run: |
          mkdir -p keystore
          echo "${{ secrets.STORE_FILE }}" | base64 --decode > keystore/release.keystore

      - name: Create google-services.json
        run: |
          echo ${{ secrets.GOOGLE_SERVICES_JSON }} | base64 --decode > $GITHUB_WORKSPACE/app/google-services.json

      - name: Build signed Release APK
        run: ./gradlew assembleRelease --stacktrace
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          KEYSTORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: Build signed Release AAB
        run: ./gradlew bundleRelease --stacktrace
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          KEYSTORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: Upload signed Release APK
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: app/build/outputs/apk/release/app-release.apk

      - name: Upload signed Release AAB
        uses: actions/upload-artifact@v4
        with:
          name: release-aab
          path: app/build/outputs/bundle/release/app-release.aab

  release:
    name: Create GitHub Release
    # Stellt sicher, dass dieser Job erst nach einem erfolgreichen Build startet.
    needs: build
    # Führt den Job nur aus, wenn der Push ein neuer Tag ist.
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Download all workflow artifacts
        # Lädt die APK und AAB von den vorherigen Schritten herunter.
        uses: actions/download-artifact@v4

      - name: Create Release
        id: create_release
        # Eine externe Action, die den Release erstellt.
        uses: softprops/action-gh-release@v1
        env:
          # Der GITHUB_TOKEN ist automatisch verfügbar, du musst ihn nicht erstellen.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            release-apk/app-release.apk
            release-aab/app-release.aab
